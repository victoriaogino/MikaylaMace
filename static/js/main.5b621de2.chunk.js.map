{"version":3,"sources":["logo.svg","Images/Mace_icon_1.png","Images/Mace_logo.png","Components/Navigation.js","Components/Header.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navigation","useState","onTop","setOnTop","setAtSlidePoint","useEffect","checkForTop","window","pageYOffset","addEventListener","removeEventListener","Navbar","className","sticky","Nav","NavItem","NavLink","Button","src","icon","Header","logo","App","alt","href","target","rel","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mHAAAA,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,yC,mBCA3CD,EAAOC,QAAU,IAA0B,uC,sOC2D5BC,MArDf,WACI,IADkB,EAGQC,oBAAS,GAHjB,mBAGXC,EAHW,KAGJC,EAHI,OAIsBF,oBAAS,GAJ/B,mBAIGG,GAJH,WAoBlB,OAdAC,qBAAU,WACN,IAAMC,EAAc,WAChBH,EAASI,OAAOC,YAPH,KAQbJ,EAAgBG,OAAOC,YAPZ,OAUf,OADAD,OAAOE,iBAAiB,SAAUH,GAC3B,kBAAMC,OAAOG,oBAAoB,SAAUJ,MACnD,IAQC,kBAACK,EAAA,EAAD,CAAQC,UAAU,oCAAoCC,OAAO,OACzD,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAASH,UAAU,YACf,kBAACI,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAQL,UAAU,cAAlB,SAGR,kBAACG,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAQL,UAAU,cAAlB,aAGR,kBAACG,EAAA,EAAD,CAASH,UAAWV,EAAQ,gBAAkB,iBAC1C,kBAACc,EAAA,EAAD,KACI,yBAAKE,IAAKC,QAGlB,kBAACJ,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAQL,UAAU,cAAlB,YAGR,kBAACG,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAQL,UAAU,cAAlB,e,iBCtCTQ,MARf,WACI,OACI,yBAAKR,UAAU,UACX,yBAAKM,IAAKG,Q,MCsBPC,MAvBf,WACE,OACE,yBAAKV,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,4BAAQA,UAAU,cAChB,yBAAKM,IAAKG,IAAMT,UAAU,WAAWW,IAAI,SACzC,mCACO,4CADP,wBAGA,uBACEX,UAAU,WACVY,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,kBCLYC,QACW,cAA7BpB,OAAOqB,SAASC,UAEe,UAA7BtB,OAAOqB,SAASC,UAEhBtB,OAAOqB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5b621de2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/Mace_icon_1.95e76a90.png\";","module.exports = __webpack_public_path__ + \"static/media/Mace_logo.790e205a.png\";","import React, { useState, useEffect } from 'react'\r\nimport { Nav, NavItem, NavLink, Navbar, Button } from 'react-bootstrap'\r\nimport '../App.css'\r\nimport icon from '../Images/Mace_icon_1.png'\r\n\r\n\r\nfunction Navigation() {\r\n    const logoEndPoint = 650\r\n    const slidePoint = 1200\r\n    const [onTop, setOnTop] = useState(true)\r\n    const [atSlidePoint, setAtSlidePoint] = useState(true)\r\n\r\n    useEffect(() => {\r\n        const checkForTop = () => {\r\n            setOnTop(window.pageYOffset < logoEndPoint)\r\n            setAtSlidePoint(window.pageYOffset > slidePoint)\r\n        }\r\n        window.addEventListener(\"scroll\", checkForTop);\r\n        return () => window.removeEventListener(\"scroll\", checkForTop);\r\n    }, []);\r\n\r\n    // const navbarClasses = classNames({\r\n    //     'nav-icon-show': true,\r\n    //     'nav-icon-hide': onTop\r\n    // })\r\n\r\n    return (\r\n        <Navbar className='justify-content-center navigation' sticky='top'>\r\n            <Nav>\r\n                <NavItem className='nav-item'>\r\n                    <NavLink>\r\n                        <Button className='nav-button'>Art</Button>\r\n                    </NavLink>\r\n                </NavItem>\r\n                <NavItem>\r\n                    <NavLink>\r\n                        <Button className='nav-button'>Writing</Button>\r\n                    </NavLink>\r\n                </NavItem>\r\n                <NavItem className={onTop ? 'nav-icon-hide' : 'nav-icon-show'}>\r\n                    <NavLink>\r\n                        <img src={icon}/>\r\n                    </NavLink>\r\n                </NavItem>\r\n                <NavItem>\r\n                    <NavLink>\r\n                        <Button className='nav-button'>Sewing</Button>\r\n                    </NavLink>\r\n                </NavItem>\r\n                <NavItem>\r\n                    <NavLink>\r\n                        <Button className='nav-button'>Plants</Button>\r\n                    </NavLink>\r\n                </NavItem>\r\n            </Nav>\r\n        </Navbar>\r\n    )\r\n}\r\n\r\nexport default Navigation","import React from 'react'\r\nimport '../App.css'\r\nimport logo from '../Images/Mace_logo.png'\r\nimport { Container } from 'react-bootstrap'\r\n\r\nfunction Header() {\r\n    return (\r\n        <div className='header'>\r\n            <img src={logo}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Navigation from './Components/Navigation'\nimport Header from './Components/Header'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navigation />\n      <Header />\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}